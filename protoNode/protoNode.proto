syntax = "proto3";

package protoNode;

message SplittedFile {
    string name = 1;
    repeated bytes chunks = 2;
}

// Para leer/escribir en el log 
message LogData { 
    string id = 1;
    string message = 2;
    string timestamp = 3; 
}

// Quiero leer el log (se lo envio a todos)
message ReadRequest {
    string id = 1;
    int64 node = 2;
    string bookname = 3; 
    string timestamp = 4; 
}


// Quiero escribir el log (se lo envio a todos)
message WriteRequest {
    string id = 1;
    int64 node = 2;
    string timestamp = 3; 
}


// Enviamos una propuesta al nodo (al nodo que recibe el msg)
message Proporsal {
    string id = 1;
    int64 node = 2;
    int64 numChunks = 3;
    string timestamp = 4;
}


// 1 = apruebo  0 = rechazo
message Response {
    string id = 1;
    string timestamp = 2;
    bool response = 3;
}


// Chunk
message ChunkPackage {
    string id = 1;
    string bookName = 2;
    int64 numChunkTotal = 3; 
    int64 numChunkActual = 4;
    bytes chunk = 5;
}

message Empty {}

service ProtoService {

    // Metodos entre Datanodes
        // Envia el chunk a guardar
    rpc RecieveChunk(ChunkPackage) returns (Empty) {}
        // Coordinación entre DataNodes para escribir en el log de NameNode 
    rpc WritePermisions(WriteRequest) returns (Response) {}  // Ricart & Agrawala

    // Metodos NameNode-DataNode
        // Escritura de DataNode en NameNode
    rpc UpdateLog(LogData) returns (Empty) {}

    // Metodos DataNode-DataNode y NameNode-Datanode
        // Coordinación entre DataNodes y entre NameNode con DataNode para verificar la propuesta
    rpc CheckProporsal(Proporsal) returns (Response) {}

    // Metodos cliente-DataNode
        // Subir un archivo chunkeado
    rpc UploadFile(SplittedFile) returns (Empty) {}
}

option go_package = "github.com/BSolarV/tarea2-sd-winducloveer/protoNode";

// Pa compilar
// protoc --go_opt=paths=source_relative --go_out=plugins=grpc:. .\protoNode\protoNode.proto