// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: protoNode/protoNode.proto

package protoNode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SplittedFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Chunks [][]byte `protobuf:"bytes,2,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *SplittedFile) Reset() {
	*x = SplittedFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoNode_protoNode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplittedFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplittedFile) ProtoMessage() {}

func (x *SplittedFile) ProtoReflect() protoreflect.Message {
	mi := &file_protoNode_protoNode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplittedFile.ProtoReflect.Descriptor instead.
func (*SplittedFile) Descriptor() ([]byte, []int) {
	return file_protoNode_protoNode_proto_rawDescGZIP(), []int{0}
}

func (x *SplittedFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SplittedFile) GetChunks() [][]byte {
	if x != nil {
		return x.Chunks
	}
	return nil
}

// Para leer/escribir en el log
type LogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *LogData) Reset() {
	*x = LogData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoNode_protoNode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogData) ProtoMessage() {}

func (x *LogData) ProtoReflect() protoreflect.Message {
	mi := &file_protoNode_protoNode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogData.ProtoReflect.Descriptor instead.
func (*LogData) Descriptor() ([]byte, []int) {
	return file_protoNode_protoNode_proto_rawDescGZIP(), []int{1}
}

func (x *LogData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogData) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// Quiero leer el log (se lo envio a todos)
type ReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Node      int64  `protobuf:"varint,2,opt,name=node,proto3" json:"node,omitempty"`
	Bookname  string `protobuf:"bytes,3,opt,name=bookname,proto3" json:"bookname,omitempty"`
	Timestamp string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoNode_protoNode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protoNode_protoNode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_protoNode_protoNode_proto_rawDescGZIP(), []int{2}
}

func (x *ReadRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadRequest) GetNode() int64 {
	if x != nil {
		return x.Node
	}
	return 0
}

func (x *ReadRequest) GetBookname() string {
	if x != nil {
		return x.Bookname
	}
	return ""
}

func (x *ReadRequest) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// Quiero escribir el log (se lo envio a todos)
type WriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Node      int64  `protobuf:"varint,2,opt,name=node,proto3" json:"node,omitempty"`
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *WriteRequest) Reset() {
	*x = WriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoNode_protoNode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequest) ProtoMessage() {}

func (x *WriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protoNode_protoNode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequest.ProtoReflect.Descriptor instead.
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return file_protoNode_protoNode_proto_rawDescGZIP(), []int{3}
}

func (x *WriteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WriteRequest) GetNode() int64 {
	if x != nil {
		return x.Node
	}
	return 0
}

func (x *WriteRequest) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// Enviamos una propuesta al nodo (al nodo que recibe el msg)
type Proporsal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Node      int64  `protobuf:"varint,2,opt,name=node,proto3" json:"node,omitempty"`
	NumChunks int64  `protobuf:"varint,3,opt,name=numChunks,proto3" json:"numChunks,omitempty"`
	Timestamp string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Proporsal) Reset() {
	*x = Proporsal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoNode_protoNode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proporsal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proporsal) ProtoMessage() {}

func (x *Proporsal) ProtoReflect() protoreflect.Message {
	mi := &file_protoNode_protoNode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proporsal.ProtoReflect.Descriptor instead.
func (*Proporsal) Descriptor() ([]byte, []int) {
	return file_protoNode_protoNode_proto_rawDescGZIP(), []int{4}
}

func (x *Proporsal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Proporsal) GetNode() int64 {
	if x != nil {
		return x.Node
	}
	return 0
}

func (x *Proporsal) GetNumChunks() int64 {
	if x != nil {
		return x.NumChunks
	}
	return 0
}

func (x *Proporsal) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// 1 = apruebo  0 = rechazo
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Response  bool   `protobuf:"varint,3,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoNode_protoNode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_protoNode_protoNode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_protoNode_protoNode_proto_rawDescGZIP(), []int{5}
}

func (x *Response) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Response) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Response) GetResponse() bool {
	if x != nil {
		return x.Response
	}
	return false
}

// Chunk
type ChunkPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BookName       string `protobuf:"bytes,2,opt,name=bookName,proto3" json:"bookName,omitempty"`
	NumChunkTotal  int64  `protobuf:"varint,3,opt,name=numChunkTotal,proto3" json:"numChunkTotal,omitempty"`
	NumChunkActual int64  `protobuf:"varint,4,opt,name=numChunkActual,proto3" json:"numChunkActual,omitempty"`
	Chunk          []byte `protobuf:"bytes,5,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *ChunkPackage) Reset() {
	*x = ChunkPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoNode_protoNode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkPackage) ProtoMessage() {}

func (x *ChunkPackage) ProtoReflect() protoreflect.Message {
	mi := &file_protoNode_protoNode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkPackage.ProtoReflect.Descriptor instead.
func (*ChunkPackage) Descriptor() ([]byte, []int) {
	return file_protoNode_protoNode_proto_rawDescGZIP(), []int{6}
}

func (x *ChunkPackage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChunkPackage) GetBookName() string {
	if x != nil {
		return x.BookName
	}
	return ""
}

func (x *ChunkPackage) GetNumChunkTotal() int64 {
	if x != nil {
		return x.NumChunkTotal
	}
	return 0
}

func (x *ChunkPackage) GetNumChunkActual() int64 {
	if x != nil {
		return x.NumChunkActual
	}
	return 0
}

func (x *ChunkPackage) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protoNode_protoNode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_protoNode_protoNode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_protoNode_protoNode_proto_rawDescGZIP(), []int{7}
}

var File_protoNode_protoNode_proto protoreflect.FileDescriptor

var file_protoNode_protoNode_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x0a, 0x0c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x22, 0x51, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x6b, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x50, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x6b, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x73, 0x61,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x54, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75,
	0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x32, 0xbd, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x41, 0x0a, 0x0f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x33, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x12,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x73, 0x61, 0x6c, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x73, 0x61, 0x6c, 0x1a,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x6f, 0x64, 0x65,
	0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x42, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x56, 0x2f, 0x74, 0x61, 0x72, 0x65, 0x61, 0x32, 0x2d, 0x73,
	0x64, 0x2d, 0x77, 0x69, 0x6e, 0x64, 0x75, 0x63, 0x6c, 0x6f, 0x76, 0x65, 0x65, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protoNode_protoNode_proto_rawDescOnce sync.Once
	file_protoNode_protoNode_proto_rawDescData = file_protoNode_protoNode_proto_rawDesc
)

func file_protoNode_protoNode_proto_rawDescGZIP() []byte {
	file_protoNode_protoNode_proto_rawDescOnce.Do(func() {
		file_protoNode_protoNode_proto_rawDescData = protoimpl.X.CompressGZIP(file_protoNode_protoNode_proto_rawDescData)
	})
	return file_protoNode_protoNode_proto_rawDescData
}

var file_protoNode_protoNode_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_protoNode_protoNode_proto_goTypes = []interface{}{
	(*SplittedFile)(nil), // 0: protoNode.SplittedFile
	(*LogData)(nil),      // 1: protoNode.LogData
	(*ReadRequest)(nil),  // 2: protoNode.ReadRequest
	(*WriteRequest)(nil), // 3: protoNode.WriteRequest
	(*Proporsal)(nil),    // 4: protoNode.Proporsal
	(*Response)(nil),     // 5: protoNode.Response
	(*ChunkPackage)(nil), // 6: protoNode.ChunkPackage
	(*Empty)(nil),        // 7: protoNode.Empty
}
var file_protoNode_protoNode_proto_depIdxs = []int32{
	6, // 0: protoNode.ProtoService.RecieveChunk:input_type -> protoNode.ChunkPackage
	3, // 1: protoNode.ProtoService.WritePermisions:input_type -> protoNode.WriteRequest
	1, // 2: protoNode.ProtoService.UpdateLog:input_type -> protoNode.LogData
	4, // 3: protoNode.ProtoService.CheckProporsal:input_type -> protoNode.Proporsal
	0, // 4: protoNode.ProtoService.UploadFile:input_type -> protoNode.SplittedFile
	7, // 5: protoNode.ProtoService.RecieveChunk:output_type -> protoNode.Empty
	5, // 6: protoNode.ProtoService.WritePermisions:output_type -> protoNode.Response
	7, // 7: protoNode.ProtoService.UpdateLog:output_type -> protoNode.Empty
	5, // 8: protoNode.ProtoService.CheckProporsal:output_type -> protoNode.Response
	7, // 9: protoNode.ProtoService.UploadFile:output_type -> protoNode.Empty
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protoNode_protoNode_proto_init() }
func file_protoNode_protoNode_proto_init() {
	if File_protoNode_protoNode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protoNode_protoNode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplittedFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoNode_protoNode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoNode_protoNode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoNode_protoNode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoNode_protoNode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proporsal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoNode_protoNode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoNode_protoNode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protoNode_protoNode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protoNode_protoNode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protoNode_protoNode_proto_goTypes,
		DependencyIndexes: file_protoNode_protoNode_proto_depIdxs,
		MessageInfos:      file_protoNode_protoNode_proto_msgTypes,
	}.Build()
	File_protoNode_protoNode_proto = out.File
	file_protoNode_protoNode_proto_rawDesc = nil
	file_protoNode_protoNode_proto_goTypes = nil
	file_protoNode_protoNode_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProtoServiceClient is the client API for ProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProtoServiceClient interface {
	// Metodos entre Datanodes
	// Envia el chunk a guardar
	RecieveChunk(ctx context.Context, in *ChunkPackage, opts ...grpc.CallOption) (*Empty, error)
	// Coordinación entre DataNodes para escribir en el log de NameNode
	WritePermisions(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*Response, error)
	// Metodos NameNode-DataNode
	// Escritura de DataNode en NameNode
	UpdateLog(ctx context.Context, in *LogData, opts ...grpc.CallOption) (*Empty, error)
	// Metodos DataNode-DataNode y NameNode-Datanode
	// Coordinación entre DataNodes y entre NameNode con DataNode para verificar la propuesta
	CheckProporsal(ctx context.Context, in *Proporsal, opts ...grpc.CallOption) (*Response, error)
	// Metodos cliente-DataNode
	// Subir un archivo chunkeado
	UploadFile(ctx context.Context, in *SplittedFile, opts ...grpc.CallOption) (*Empty, error)
}

type protoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoServiceClient(cc grpc.ClientConnInterface) ProtoServiceClient {
	return &protoServiceClient{cc}
}

func (c *protoServiceClient) RecieveChunk(ctx context.Context, in *ChunkPackage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protoNode.ProtoService/RecieveChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoServiceClient) WritePermisions(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protoNode.ProtoService/WritePermisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoServiceClient) UpdateLog(ctx context.Context, in *LogData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protoNode.ProtoService/UpdateLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoServiceClient) CheckProporsal(ctx context.Context, in *Proporsal, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protoNode.ProtoService/CheckProporsal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoServiceClient) UploadFile(ctx context.Context, in *SplittedFile, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protoNode.ProtoService/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtoServiceServer is the server API for ProtoService service.
type ProtoServiceServer interface {
	// Metodos entre Datanodes
	// Envia el chunk a guardar
	RecieveChunk(context.Context, *ChunkPackage) (*Empty, error)
	// Coordinación entre DataNodes para escribir en el log de NameNode
	WritePermisions(context.Context, *WriteRequest) (*Response, error)
	// Metodos NameNode-DataNode
	// Escritura de DataNode en NameNode
	UpdateLog(context.Context, *LogData) (*Empty, error)
	// Metodos DataNode-DataNode y NameNode-Datanode
	// Coordinación entre DataNodes y entre NameNode con DataNode para verificar la propuesta
	CheckProporsal(context.Context, *Proporsal) (*Response, error)
	// Metodos cliente-DataNode
	// Subir un archivo chunkeado
	UploadFile(context.Context, *SplittedFile) (*Empty, error)
}

// UnimplementedProtoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProtoServiceServer struct {
}

func (*UnimplementedProtoServiceServer) RecieveChunk(context.Context, *ChunkPackage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecieveChunk not implemented")
}
func (*UnimplementedProtoServiceServer) WritePermisions(context.Context, *WriteRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WritePermisions not implemented")
}
func (*UnimplementedProtoServiceServer) UpdateLog(context.Context, *LogData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLog not implemented")
}
func (*UnimplementedProtoServiceServer) CheckProporsal(context.Context, *Proporsal) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProporsal not implemented")
}
func (*UnimplementedProtoServiceServer) UploadFile(context.Context, *SplittedFile) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}

func RegisterProtoServiceServer(s *grpc.Server, srv ProtoServiceServer) {
	s.RegisterService(&_ProtoService_serviceDesc, srv)
}

func _ProtoService_RecieveChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceServer).RecieveChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoNode.ProtoService/RecieveChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceServer).RecieveChunk(ctx, req.(*ChunkPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoService_WritePermisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceServer).WritePermisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoNode.ProtoService/WritePermisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceServer).WritePermisions(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoService_UpdateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceServer).UpdateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoNode.ProtoService/UpdateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceServer).UpdateLog(ctx, req.(*LogData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoService_CheckProporsal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Proporsal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceServer).CheckProporsal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoNode.ProtoService/CheckProporsal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceServer).CheckProporsal(ctx, req.(*Proporsal))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplittedFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoNode.ProtoService/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceServer).UploadFile(ctx, req.(*SplittedFile))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProtoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoNode.ProtoService",
	HandlerType: (*ProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecieveChunk",
			Handler:    _ProtoService_RecieveChunk_Handler,
		},
		{
			MethodName: "WritePermisions",
			Handler:    _ProtoService_WritePermisions_Handler,
		},
		{
			MethodName: "UpdateLog",
			Handler:    _ProtoService_UpdateLog_Handler,
		},
		{
			MethodName: "CheckProporsal",
			Handler:    _ProtoService_CheckProporsal_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _ProtoService_UploadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoNode/protoNode.proto",
}
